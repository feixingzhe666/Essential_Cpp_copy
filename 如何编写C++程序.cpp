#include<iostream>
#include<string>
using namespace std;
int main()
{
    string user_name;
    cout << "Please enter your first name:";
    cin >> user_name;
    cout <<'\n' 
        <<"Hello,"  
        <<user_name    
        <<" ... and goodbye!\n";    
    return 0;
}

//C++编程基础
// 1.1如何撰写C++程序
// 每个C++程序都是从一个名为main的函数开始执行，
// main是用户自行撰写的函数，其通用形式如下：
// int main()
// {
//     //我们的程序代码置于此处
// }
// int 是C++程序员的关键字。用来表示语言内建的整数数据型别。

// 函数是一块独立的程序代码序列，能够执行一些运算，
// 他包括4个部分：返回值的型别、函数名称、参数列、函数主体。

// 【
// 函数的返回值通常用来表示运算结果。main()函数返回整型类别。
// main()的返回值用来告诉调用者，这个程序是否正确执行。
// 习惯上，程序执行无误时，我们令main()返回零。
// 若返回一个非零值，表示程序在执行过程中发生了错误
// 】
// 【
// 函数的名称由程序员选定。函数名称最好能够提供某些信息。
// 】
// 【
// main并非是程序语言定义的关键词。
// 但是，在执行我们这个C++程序的编译系统时，
// 会假设程序中定义有main()函数。
// 如果我们没有定义，程序将无法执行
// 】
// 【
// 函数的参数列有两个括号括住，置于函数名称之后。
// 空的参数列如main(),表示函数不接受任何参数。
// 】
// 【
// 参数列用来表示“函数执行时，调用者可以传给函数的型别列表”。
// 列表之中以逗号隔开各个型别（通常我们会说用户调用或是唤起某个函数）
// 举例来说，如果我们撰写min函数，时期返回两数中的较小者，
// 那么它的参数列应该注明两个即将被拿来比较的数值的型别。
// 这样应用来比较两整数值的min()函数，可能会有如下形式加以定义：
// int main(int val1,int val2)
// {
//     //程序代码置于此处
// }
// 】
// 【
// 函数的主体由大括号标出({})，其中含有“提供此函数之运算”的程序代码。
// 双斜线（//）表示该行内容为注释，也就是程序员对程序代码所给的某些声明。
// 注释的撰写是为了遍历阅读者更容易理解程序。编译过程中，注释会被忽略掉。
// 双斜线之后直至行末的所有哦内容，都会被当做程序注释。
// 】


// 所谓类(class)，是用户自定的数据类别。
// class机制让我们得以将数据类别加入到我们的程序中，并有能力识别它们。
// 面向对象的类体系定义了一整个家族体系的各相关型别，例如终端机与文件输入装置、终端机与文件输出装置等。

// C++事先定义了一些基础数据型别：布尔值、字符、整数、浮点数，
// 虽然它们为我们的编程任务提供了基石，但它们并非程序的重心所在。
// 举个例子
// 照相机具有一个性质：空间位置。
// 这个位置通常可以用三个浮点数表示。
// 相机还具备另一个性质：视角方向
// 同样也可以用三个浮点数表示。
// 通常我们还会用所谓的aspect ratio来描述照相机窗口的宽高比，
// 这只需单一浮点数即可表示

// 在最原始最基本的情况下，照相机可以用7个浮点数来表示，
// 其中6个分别组成了两组x、y、z坐标。
// 以这么低阶的方式来编程，
// 我们势必得让我们的思考不断地在“照相机抽象性质”和“相应与照相机的7个浮点数”之间反复来回。

// class机制，赋予我们“增加程序内至型别抽象化层次”的能力。
// 我们可以定义一个Point3d class用来表示“空间位置和视角方向”两个性质
// 同样道理，我们可以定义一个Camera class，
// 其中包含两个Point3d对象和一个浮点数。
// 以这种方式，我们我们同样使用七个浮点数值来表示照相机的性质，
// 不同的是，我们的思考不再直接面对7个浮点数，而是转为对Camera class的操作

// class的定义，一般来说分为两部分，分别写于不同的文件。
// 其中之一是所谓的“头文件”，用来声明该class所提供的各种操作行为。
// 另一个文件，程序代码文件，则包含这些操作行为的实现内容。

// 欲使用class，我们必须先在程序中含入其头文件。
// 表头文件可以让程序知道class的定义
// C++标准的“输入/输出 程序库”名为iostream，其中包含了相关的整套classes，用以支撑对终端机和文件的输入和输出。
// 我们必须含入iostream程序库的相关头文件，才能够使用它：
//     #include<iostream>
// 我将利用已定义好的cout对象，将信息写到用户的终端机上。output运算符(<<)可以将数据导致cout，像这样：
//     cout<<"Please enter your first name:";
// 上述这行便是C++所谓的“语句”。
// 语句是C++程序的最小独立单元，
// 就像自然语言中的句子一样，语句以分号作为结束。
// 以上语句将常量字符串(string literal,封装与双引号内)写到用户的终端机上，在那之后，用户便会看到如下信息：
//     Please enter your first name:

// 接下来我们要读取用户的输入内容。
// 读取之前，我们必须先定义一个对象,用以存储数据。
// 欲定义一个对象，必须指定其数据型别，再给定其识别名称。
// 截止目前，我们已经用过int数据型别，但是要用它来存储某人的名字，几乎是不可能的事。
// 更适当的数据型别是标准程序库的string

// class:
//     string user_mane:

// 如此以来我们便定义了一个名为user_name的对象，它隶属于string class。
// 这样的定义有个特别的名称，称作“声明语句”
// 单只写下这行语句还不行，因为我们必须让程序制导string class的定义
// 因此，还必须在程序中含入string class的头文件：
// #include<string>
// 接下来便可利用已定义好的cin对象来读取用户在终端机上的输入内容。
// 通过input运算符(>>)将输入内容导入到具有适当型别的对象身上：
//     cin >> user_name:
// 以上描述的输出和输入操作，在用户终端机上显示如下:
// Please enter your first name: anna
//     剩下的工作就是印出像用户打招呼的信息了，我们希望获得这样的输出结果：
//     Hello,anna ... and goodbye!
// 未来产生上述信息，我们的第一个步骤便是将输出位置（屏幕上的游标）调到下一行起始处，将换行字符常量写至cout，便可达到这个目的：
//     cout <<'\n';
// 所谓字符常量系又一组单引号括住。
// 字符常量分两类：
// 第一类是课打印字符，例如英文字母('a','A'等等)、数字、标点符号。
// 另一类是不可打印字符，例如换行符（'\n'）或跳格字符（tab,'\t'）
// 由于不可打印字符并无直接表示法，
// 所以必须以两个字符所组成的字符序列表示之。

// 现在，我们已经将输出位置调整到下一行起始处，接着要产生Hello信息：
//     cout<<"Hello";
// 接下来应该在此处输出用户的名字。这个名字已经储存在 user_name这个string对象中。
// 我们应当如何进行呢？
// 其实就和处理其他数据型别一样，只要：
//     cout<<user_name;
// 便大功告成，最后我们以道别来结束这段招呼信息
// （注意：字符串常量内可以同时包含可打印字符和不可打印字符）
//     cout<<"...and goodbye!\n";
// 一般而言，所有内建数据型别都可以用同样的方式来输出————也就是说只需换掉output运算符右方的值即可。例如：
//     cout<<"3+4=";
//     cout<<3+4;
//     cout<<'\n';
// 会产生如下输出结果：
//     3+4=7
// 当我们在自己的应用程序中定义了新的class时，我们也应该为每一个class提供它们自己的output运算符。
// 这么一来便可以让那些classes的用户得以像面队内建型别一样地以相同方式输出对象内容。
// 如果嫌连续数行的输出语句太烦人，也可以将数段内容连结成单一输出语句：
//     cout <<'\n'
//          <<"Hello,"
//          <<user_name
//          <<"... and goodbye!\n";
// 最后，我们以return语句清楚地表示main()到此结束：
//     return 0;
// return是C++的关键字，此例中0是紧接于return之后的表达式，也就是此函数的返回值，
// 先前我层说过，main()返回0即程序执行成功。
// 将所有程序片段组合在一起，便是我们的第一个完整的C++程序：
//整个程序中还有一行语句：
/*    using name_space std;
using和namespace都是C++关键词，std是标准程序库所驻之命名空间的名称。
标准库所提供的任何事物都被封装在命名空间std内。

所谓命名空间是一种将程序名称封装起来的方法。
通过这种方法，可以避免和应用程序发生命名冲突的问题（所谓命名冲突是指在应用程序内两个不同的实体具有相同的名称，导致程序无法区分两者。
命名发生冲突时，程序必须等到该命名冲突活的决议之后，才第一继续进行）
命名空间像是在众多名称的课件方位之间竖起的一到道围墙

若要在程序中使用string class以及cin、cout这两个oistream类对象，我们不仅得含入<string>及<iostream>头文件，还得让命名空间std内的名称曝光。
而所谓的using derective:
    using namespace std;
便是让命名空间中的，名称曝光的最简单办法。




















